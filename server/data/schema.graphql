schema {
  query: Query
}

type Chapter implements Node {
  id: ID!
  name: String
  description: String
  module_id: Int
  steps(after: String, first: Int, before: String, last: Int): StepConnection
}

type ChapterConnection {
  pageInfo: PageInfo!
  edges: [ChapterEdge]
}

type ChapterEdge {
  node: Chapter
  cursor: String!
}

type Course implements Node {
  id: ID!
  name: String
  url: String
  description: String
  modules(after: String, first: Int, before: String, last: Int): ModuleConnection
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]
}

type CourseEdge {
  node: Course
  cursor: String!
}

type Module implements Node {
  id: ID!
  name: String
  description: String
  course_id: Int
  chapters(after: String, first: Int, before: String, last: Int): ChapterConnection
}

type ModuleConnection {
  pageInfo: PageInfo!
  edges: [ModuleEdge]
}

type ModuleEdge {
  node: Module
  cursor: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: User
}

type Step implements Node {
  id: ID!
  body: String
  chapter_id: Int
}

type StepConnection {
  pageInfo: PageInfo!
  edges: [StepEdge]
}

type StepEdge {
  node: Step
  cursor: String!
}

type User implements Node {
  id: ID!
  name: String
  username: String
  website: String
  courses(after: String, first: Int, before: String, last: Int): CourseConnection
  course(id: Int): Course
}
