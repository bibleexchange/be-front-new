schema {
  query: Query
}

type Chapter implements Node {
  id: ID!
  title: String
  description: String
  moduleId: Int
  steps(after: String, first: Int, before: String, last: Int): StepConnection
  orderBy: Int
}

type ChapterConnection {
  pageInfo: PageInfo!
  edges: [ChapterEdge]
}

type ChapterEdge {
  node: Chapter
  cursor: String!
}

type Course implements Node {
  id: ID!
  title: String
  url: String
  description: String
  modules(after: String, first: Int, before: String, last: Int): ModuleConnection
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]
}

type CourseEdge {
  node: Course
  cursor: String!
}

type Module implements Node {
  id: ID!
  title: String
  description: String
  courseId: Int
  chapters(after: String, first: Int, before: String, last: Int): ChapterConnection
  orderBy: Int
}

type ModuleConnection {
  pageInfo: PageInfo!
  edges: [ModuleEdge]
}

type ModuleEdge {
  node: Module
  cursor: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
  courses(after: String, first: Int, before: String, last: Int): CourseConnection
  store: Store
}

type Step implements Node {
  id: ID!
  body: String
  chapterId: Int
  orderBy: Int
  type: String
}

type StepConnection {
  pageInfo: PageInfo!
  edges: [StepEdge]
}

type StepEdge {
  node: Step
  cursor: String!
}

type Store implements Node {
  id: ID!
  people(after: String, first: Int, before: String, last: Int): UserConnection
  course(after: String, first: Int, before: String, last: Int, id: Int): Course
  courses(after: String, first: Int, before: String, last: Int, filter: String): CourseConnection
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  username: String
  createdAt: String
  updatedAt: String
  middleName: String
  suffix: String
  twitter: String
  profileImage: String
  gender: String
  email: String
  password: String
  confirmationCode: String
  confirmed: String
  active: String
  bibleNavs: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type Viewer implements Node {
  id: ID!
  auth(token: Int): User
  course(after: String, first: Int, before: String, last: Int, id: Int): Course
  courses(after: String, first: Int, before: String, last: Int, filter: String): CourseConnection
}
